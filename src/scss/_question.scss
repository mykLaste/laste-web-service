#hpquestion {
  margin: 0;
  font-family: 'Open Sans', sans-serif;
  position: relative;

  .lead {
    font-weight: 500;
    text-align: center;
    margin-bottom: 60px;
    margin-top: 0;

    @include mq($mobileSize) {
      font-size: $mfsbodyS;
      margin-bottom: 40px;
      margin-top: 40px;
    }
  }

  main {
    @include mq($mobileSize) {
      padding: 0 20px;
    }
  }

  #quizForm {

    @include mq($mobileSize) {
      margin-bottom: 30px;
    }

    #questions {
      font-size: $fsbodySS;

      .question {
        border-radius: 8px;
        background: $bgBlue;
        padding: 40px 60px 60px;
        width: 100%;
        min-height: 500px;
        display: none;
        flex-wrap: wrap;
        justify-content: center;
        align-items: flex-start;
        position: relative;
        box-shadow: 6px 6px 8px rgba(0, 0, 0, 0.2);

        @include mq($mobileSize) {
          border-radius: 8px;
          background: $bgBlue;
          padding: 20px 10px 50px;
          min-height: 240px;
          box-shadow: 6px 6px 8px rgba(0, 0, 0, 0.2);
        }

        .title {
          font-weight: 700;
          font-size: $fsbodyS;
          margin-top: 0;
          width: 100%;

          @include mq($mobileSize) {
            font-size: $mfsbodyS;
          }


          span {
            display: inline-block;
          }
        }

        .answer {
          background: white;
          margin-top: 20px;
          margin-left: 30px;
          margin-right: 30px;
          padding: 0;
          font-size: $fsbodyS;
          font-weight: 700;
          border-radius: 8px;
          box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.2);
          min-width: 180px;
          text-align: center;
          display: flex;

          @include mq($mobileSize) {
            margin-top: 8px;
            margin-left: 8px;
            margin-right: 8px;
            padding: 0;
            font-size: $mfsbodyS;
            font-weight: 700;
            border-radius: 8px;
            box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.2);
            min-width: 90px;
            text-align: center;
            display: flex;
          }

          &:hover {
            background: #1f2685b4;
            color: white;
          }

          &:has(input:checked) {
            background: $darkblue;
            color: white;
          }

          input {
            display: none;
          }

          label {
            cursor: pointer;
            flex-grow: 1;
            padding: 20px 40px;

            @include mq($mobileSize) {
              padding: 8px 10px;
            }
          }
        }

      }

      .question1 {
        display: flex;
      }


    }

    .control {
      margin-bottom: 60px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transform: translateY(-80px);
      padding: 0 30px;

      @include mq($mobileSize) {
        margin-bottom: 20px;

        transform: translateY(-40px);
        padding: 0 10px;
      }

      span {
        width: 60px;

        @include mq($mobileSize) {
          width: 30px;
        }

        img {
          width: 100%;
          content: black;
          cursor: pointer;
        }
      }

      .prev {
        display: none;

        &:hover {
          opacity: 0.8;
        }
      }

      .next {
        fill: $darkblue;

        &:hover {
          opacity: 0.8;
        }
      }

      .qNum {
        text-align: center;
        font-weight: 700;
        color: $darkgrey;

        @include mq($mobileSize) {
          width: auto;
        }
      }
    }

    .showResult {
      text-align: center;
      display: none;

      .showResultButton {
        border: 2px solid $turquoise;
        background: $turquoise;
        color: white;
        padding: 10px 40px;
        font-size: $fsbodyS;
        font-weight: 700;
        border-radius: 8px;
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.2);
        min-width: 180px;
        text-align: center;
        cursor: pointer;

        @include mq($mobileSize) {
          padding: 8px 10px;
          font-size: $mfsbodyS;
          min-width: 90px;
        }
      }
    }

    #missing {
      display: none;

      .missingEle {
        color: red;
        margin-right: 20px;
        display: inline-block;

        @include mq($mobileSize) {
          margin-right: 10px;
        }
      }
    }

  }

  #results {
    display: none;
    border-radius: 8px;
    background: $bgGreen;
    padding: 40px;
    width: 100%;
    min-height: 600px;
    box-shadow: 6px 6px 8px rgba(0, 0, 0, 0.2);
    margin-bottom: 100px;
    text-align: center;

    @include mq($mobileSize) {
      padding: 20px;
      min-height: 300px;
      margin-bottom: 40px;
    }

    .title {
      font-size: $fsbodyL;

      @include mq($mobileSize) {
        font-size: $mfsbodyL;
      }
    }

    .lead {
      margin-bottom: 40px;

      @include mq($mobileSize) {
        margin-bottom: 20px;
        font-size: $mfsbodyS;
      }
    }

    #report {
      text-align: left;

      .report_genre {
        font-size: $fsbodyM;
        font-weight: 700;
        margin-bottom: 20px;
        background: $darkblue;
        padding: 0 20px;
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.2);
        color: white;

        @include mq($mobileSize) {
          font-size: $mfsbodyS;
          margin-bottom: 10px;
          padding: 8px 10px;
        }
      }

      .report_genre_detail{
        margin-bottom: 60px;
        background: white;
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.2);
        color: black;
        padding: 20px;

        @include mq($mobileSize) {
          margin-bottom: 30px;
          padding: 10px;
          font-size: $mfsbodySS;
        }

        .report_toggle {
          cursor: pointer;
          display: inline-block;
          margin-top: 0;

          &::after {
            content: '\25B2'; /* 上向きの三角 */
            display: inline-block;
            margin-left: 5px;
            transition: transform 0.3s;
          }

          &.active::after {
            transform: rotate(180deg);
            transition: transform 0.3s;
          }
        }

        .report_genre_detail_reason {
          display: none;

          .report {
            margin-bottom: 20px;

            @include mq($mobileSize) {
              margin-bottom: 20px;
            }

            .report_question {
              font-weight: 700;

              @include mq($mobileSize) {
                margin-bottom: 10px;
              }
            }

            .report_answer {
              padding-left: 20px;
              @include mq($mobileSize) {
                padding-left: 10px;
                margin-bottom: 10px;
              }
            }

            .report_reason {
              padding-left: 20px;

              @include mq($mobileSize) {
                padding-left: 10px;
              }
            }
          }
        }
      }

      .report_toggle.active + .report_genre_detail_reason {
        display: block;
      }
    }

    .saveForm {
      max-width: 600px;
      margin: 0 auto;
      margin-top: 80px;

      .saveForm_lead {
        margin-bottom: 20px;

        @include mq($mobileSize) {
          margin-bottom: 10px;
          font-size: $mfsbodyS;
        }
      }

      .nameField {
        margin-bottom: 60px;
        display: flex;
        flex-wrap: wrap;

        @include mq($mobileSize) {
          margin-bottom: 30px;
        }

        p {
          margin: 0;
          font-size: $fsbodySS;
          font-weight: 700;
          width: 30%;
          line-height: 2em;

          @include mq($mobileSize) {
            margin-right: 0;
            font-size: $mfsbodySS;
            width: 100%;
          }
        }

        .nameField_input {
          width: 70%;
          text-align: left;

          @include mq($mobileSize) {
            font-size: $mfsbodySS;
            width: 100%;
            padding: 0 0.5em;
          }

          #savedName {
            font-size: $fsbodySS;
            width: 100%;
            padding: 0 0.5em;
            height: 2em;
            display: block;

            @include mq($mobileSize) {
              font-size: $mfsbodySS;
            }
          }
        }

        #saveError {
          color: red;
          font-size: 0.9em;
          margin-top: 10px;
          display: block;
          display: none;

          @include mq($mobileSize) {
            font-size: $mfsbodySS;
            margin-top: 4px;
          }
        }
      }

      #saveButton {

        button {
          border: 2px solid $turquoise;
          background: $turquoise;
          color: white;
          padding: 10px 40px;
          font-size: $fsbodyS;
          font-weight: 700;
          border-radius: 8px;
          box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.2);
          min-width: 180px;
          text-align: center;
          cursor: pointer;
  
          @include mq($mobileSize) {
            padding: 8px 10px;
            font-size: $mfsbodyS;
            min-width: 90px;
          }
        }
      }
    }
  }

  .loading_anime {
    background-color: black; //背景色
    width: 100vw; //横幅を画面いっぱいに指定
    height: 100vh; //縦幅を・・・同上
    display: flex; //flexBoxでレイアウト制御します。
    justify-content: center; //左右中央に指定
    align-items: center; //上下中央に指定
    flex-direction: column; //ぐるぐると文字を縦並びにする指定
    position: absolute; //画面のどこにも動かないように固定します。
    top: 0; //上から0pxの位置に固定します。
    z-index: 100; //一番上に表示します。
    opacity: 0.8;
    display: none;

    .loader {
      border: 12px solid $darkgrey; //12pxの白い四角をつくります
      border-radius: 50%; //作った四角の角を丸めます
      border-top: 12px solid #3498db; //これを追加！！
      width: 100px; //ぐるぐるの大きさを決めます
      height: 100px; //ぐるぐるの大きさを決めます
      animation: spin 1s linear infinite;  //これを追加！！！
    }

    @keyframes spin{
      0%{
        transform: rotate(0deg);  //アニメーション開始時にどういう状態か？
      }

      100%{
        transform: rotate(360deg); //アニメーション終了時にどういう状態か？
      }
    }

    .text{
      color: white; //これはNow loading...の色指定なのでぐるぐるとはあまり関係ない
      font-weight: 700;
    }
  }

  .completed {
    background-color: black; //背景色
    width: 100vw; //横幅を画面いっぱいに指定
    height: 100vh; //縦幅を・・・同上
    display: flex; //flexBoxでレイアウト制御します。
    justify-content: center; //左右中央に指定
    align-items: center; //上下中央に指定
    flex-direction: column; //ぐるぐると文字を縦並びにする指定
    position: absolute; //画面のどこにも動かないように固定します。
    top: 0; //上から0pxの位置に固定します。
    z-index: 100; //一番上に表示します。
    opacity: 0.8;
    display: none;

    .checkmark {
      color: $turquoise;
      font-size: 100px;
      margin: 0;
    }

    .text{
      color: white; //これはNow loading...の色指定なのでぐるぐるとはあまり関係ない
      font-weight: 700;
      font-size: 30px;
      margin: 0;
    }
  }

  .failed {
    background-color: black; //背景色
    width: 100vw; //横幅を画面いっぱいに指定
    height: 100vh; //縦幅を・・・同上
    display: flex; //flexBoxでレイアウト制御します。
    justify-content: center; //左右中央に指定
    align-items: center; //上下中央に指定
    flex-direction: column; //ぐるぐると文字を縦並びにする指定
    position: absolute; //画面のどこにも動かないように固定します。
    top: 0; //上から0pxの位置に固定します。
    z-index: 100; //一番上に表示します。
    opacity: 0.8;
    display: none;

    .batsu {
      color: red;
      font-size: 100px;
      margin: 0;
    }

    .text{
      color: white; //これはNow loading...の色指定なのでぐるぐるとはあまり関係ない
      font-weight: 700;
      font-size: 30px;
      margin: 0;
    }
  }
}